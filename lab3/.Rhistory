setwd("C:/Users/robbh/Documents/zzzJun/itws4600/ITWS4600/lab3")
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
View(dataset)
View(dataset)
View(dataset)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
## train model & predict in one step ('knn' function from 'class' library)
knn.predicted <- knn(train = dataset.train[,1:4], test = dataset.test[,1:4], cl = dataset.train$Age.group, k = 11)
## train model & predict in one step ('knn' function from 'class' library)
knn.predicted <- knn(train = dataset.train[,1:4], test = dataset.test[,1:4], c = dataset.train$Age.group, k = 11)
## train model & predict in one step ('knn' function from 'class' library)
knn.predicted <- knn(train = dataset.train[,1:4], test = dataset.test[,1:4], cl = dataset.train$age.group, k = 11)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
View(dataset)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
View(dataset)
## train model & predict in one step ('knn' function from 'class' library)
knn.predicted <- knn(train = dataset.train[,1:4], test = dataset.test[,1:4], cl = dataset.train$agegroups, k = 11)
View(dataset)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the height, whole weight, and shucked weight
knn.predicted <- knn(train = dataset.train[,4:6], test = dataset.test[,4:6], cl = dataset.train$agegroups, k = 11)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, dataset.test$agegroups, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(dataset.test$agegroups)
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length - shucked weight
knn.predicted <- knn(train = dataset.train[,2:6], test = dataset.test[,2:6], cl = dataset.train$agegroups, k = 11)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, dataset.test$agegroups, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(dataset.test$agegroups)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
# print model outputs
print(knn.model)
# plot acccuracy with k, limiting values of y axis between .9 & 1
plot(k.list,accuracy.list,type = "b", ylim = c(.5,1))
# sample create list of 105 (70% of 150) numbers randomly sampled from 1-150
n = 4100
sampleAbalone <- sample(n,n*.8)
## create train & test sets based on sampled indexes
dataset.train <- dataset[sampleAbalone,]
dataset.test <- dataset[-sampleAbalone,]
# simple estimate of k
k = round(sqrt(n))
k <- k-1
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = dataset.train[,2:3], test = dataset.test[,2:3], cl = dataset.train$agegroups, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, dataset.test$agegroups, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(dataset.test$agegroups)
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the height, whole weight
knn.predicted <- knn(train = dataset.train[,3:4], test = dataset.test[,3:4], cl = dataset.train$agegroups, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, dataset.test$agegroups, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(dataset.test$agegroups)
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, whole weight
knn.predicted <- knn(train = dataset.train[,2:6], test = dataset.test[,2:6], cl = dataset.train$agegroups, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, dataset.test$agegroups, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(dataset.test$agegroups)
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, whole weight
knn.predicted <- knn(train = dataset.train[,c(2:6)], test = dataset.test[,c(2:6)], cl = dataset.train$agegroups, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, dataset.test$agegroups, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(dataset.test$agegroups)
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, whole weight
knn.predicted <- knn(train = dataset.train[,c(2,6)], test = dataset.test[,c(2,6)], cl = dataset.train$agegroups, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, dataset.test$agegroups, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(dataset.test$agegroups)
# list of k
k.list <- c(7,9,11,13,15,17,19)
# empty list for accuracy
accuracy.list <- c()
# loop: train&predict model for each k, compute accuracy and append it to list
for (k in k.list) {
knn.predicted <- knn(train = dataset[,c(2,6)], test = dataset[,c(2,6)], cl = dataset$agegroups, k = k)
contingency.table <- table(knn.predicted, dataset$agegroups, dnn=list('predicted','actual'))
accuracy <- sum(diag(contingency.table))/length(dataset$agegroups)
accuracy.list <- c(accuracy.list,accuracy)
}
# plot acccuracy with k, limiting values of y axis between .9 & 1
plot(k.list,accuracy.list,type = "b", ylim = c(.5,1))
## train and evaluate multiple knn models to find optimal k
knn.model <- train(dataset[,c(2,6)], dataset$agegroups, method = "knn", tuneLength = 10, trControl = trainControl(method = "cv"))
# print model outputs
print(knn.model)
# list of k
k.list <- c(7,9,11,13,15,17,19, 21, 25, 29, 33, 37)
# empty list for accuracy
accuracy.list <- c()
# loop: train&predict model for each k, compute accuracy and append it to list
for (k in k.list) {
knn.predicted <- knn(train = dataset[,c(2,6)], test = dataset[,c(2,6)], cl = dataset$agegroups, k = k)
contingency.table <- table(knn.predicted, dataset$agegroups, dnn=list('predicted','actual'))
accuracy <- sum(diag(contingency.table))/length(dataset$agegroups)
accuracy.list <- c(accuracy.list,accuracy)
}
# plot acccuracy with k, limiting values of y axis between .9 & 1
plot(k.list,accuracy.list,type = "b", ylim = c(.5,1))
## train and evaluate multiple knn models to find optimal k
knn.model <- train(dataset[,c(2,6)], dataset$agegroups, method = "knn", tuneLength = 10, trControl = trainControl(method = "cv"))
# print model outputs
print(knn.model)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
source("~/zzzJun/itws4600/ITWS4600/lab3/Lab3Script.R", echo=TRUE)
