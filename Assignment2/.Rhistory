setwd("C:/Users/robbh/Documents/zzzJun/itws4600/ITWS4600/Assignment2")
library(class)
library(caret)
dataset <- read.csv("epi2024results06022024.csv")
View(dataset)
dataset <- read.csv("epi_results_2024_pop_gdp.csv")
View(dataset)
## 1) Derive 2 subsets, each for a different region.
EasternEurope = dataset[region="Eastern Europe"]
## 1) Derive 2 subsets, each for a different region.
EasternEurope = dataset[dataset$region="Eastern Europe"]
## 1) Derive 2 subsets, each for a different region.
EasternEurope = dataset[dataset$region=="Eastern Europe"]
## 1) Derive 2 subsets, each for a different region.
EasternEurope = dataset[dataset$region=="Eastern Europe",]
GlobalWest = dataset[dataset$region=="Global West",]
View(EasternEurope)
View(GlobalWest)
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope.gdp)
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp)
hist(GlobalWest$gdp)
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp)
lines(density(EasternEurope$gdp, na.rm = TRUE, bw=1.))
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp, seq(0., 100000., 1.0), prob=TRUE)
lines(density(EasternEurope$gdp, na.rm = TRUE, bw=1.))
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp)##, seq(0., 100000., 1.0), prob=TRUE)
lines(density(EasternEurope$gdp, na.rm = TRUE, bw=1.))
lines(density(EasternEurope_gdp, bw = 1000), col = "red", lwd = 2)
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp, prob=TRUE)
lines(density(EasternEurope_gdp, bw = 1000), col = "red", lwd = 2)
library(class)
library(caret)
dataset <- read.csv("epi_results_2024_pop_gdp.csv")
## 1) Derive 2 subsets, each for a different region.
EasternEurope = dataset[dataset$region=="Eastern Europe",]
GlobalWest = dataset[dataset$region=="Global West",]
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope_gdp,
probability = TRUE,  # Scale to match density
col = "lightblue",
main = "GDP Distribution - Eastern Europe",
xlab = "GDP")
lines(density(EasternEurope_gdp, bw = 1000), col = "red", lwd = 2)
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp,
probability = TRUE,  # Scale to match density
col = "lightblue",
main = "GDP Distribution - Eastern Europe",
xlab = "GDP")
lines(density(EasternEurope_gdp, bw = 1000), col = "red", lwd = 2)
lines(density(EasternEurope_gdp, bw = 100), col = "red", lwd = 2)
lines(density(EasternEurope$gdp, bw = 100), col = "red", lwd = 2)
lines(density(EasternEurope$gdp, bw = 1000), col = "red", lwd = 2)
lines(density(EasternEurope$gdp, bw = 1000))
lines(density(EasternEurope$gdp, bw = 1000))
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp,
probability = TRUE,  # Scale to match density
col = "lightblue",
main = "GDP Distribution - Eastern Europe",
xlab = "GDP")
lines(density(EasternEurope$gdp, bw = 1000))
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp,
probability = TRUE,  # Scale to match density
main = "GDP Distribution - Eastern Europe",
xlab = "GDP")
lines(density(EasternEurope$gdp, bw = 1000))
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp,
probability = TRUE,
col = "blue"
main = "GDP Distribution - Eastern Europe",
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp,
probability = TRUE,
col = "blue",
main = "GDP Distribution - Eastern Europe",
xlab = "GDP")
lines(density(EasternEurope$gdp, bw = 1000))
lines(density(EasternEurope$gdp, bw = 1000), col = "red")
lines(density(EasternEurope$gdp, bw = 1000), col = "red", lwd = 3)
hist(GlobalWest$gdp,
probability = TRUE,
col = "blue",
main = "GDP Distribution - Eastern Europe",
xlab = "GDP")
lines(density(GlobalWest$gdp, bw = 1000), col = "red", lwd = 3)
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp,
col = "blue",
main = "GDP Distribution - Eastern Europe",
xlab = "GDP")
lines(density(EasternEurope$gdp, bw = 1000), col = "red", lwd = 3)
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp,
col = "blue",
main = "GDP Distribution - Eastern Europe",
xlab = "GDP"
probability = TRUE)
lines(density(EasternEurope$gdp, bw = 1000), col = "red", lwd = 3)
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp,
col = "blue",
main = "GDP Distribution - Eastern Europe",
xlab = "GDP",
probability = TRUE)
lines(density(EasternEurope$gdp, bw = 1000), col = "red", lwd = 3)
hist(GlobalWest$gdp,
probability = TRUE,
col = "blue",
main = "GDP Distribution - Eastern Europe",
xlab = "GDP")
lines(density(GlobalWest$gdp, bw = 1000), col = "red", lwd = 3)
#slide 9
ECO_data <- read.csv("epi2024results06022024.csv")
View(ECO_data)
#slide 10
attach(ECO_data)
## 1.1. Plot histograms for a variable of your choice for both regions with density lines overlayed.
hist(EasternEurope$gdp,
col = "blue",
main = "GDP Distribution - Eastern Europe",
xlab = "GDP",
probability = TRUE)
lines(density(EasternEurope$gdp, bw = 1000), col = "red", lwd = 3)
hist(GlobalWest$gdp,
probability = TRUE,
col = "blue",
main = "GDP Distribution - Global West",
xlab = "GDP")
lines(density(GlobalWest$gdp, bw = 1000), col = "red", lwd = 3)
## 1.2. Plot QQ plots for both variables compared to known probability distributions
qqnorm(EasternEurope$gdp,
main = "QQ Plot - Eastern Europe GDP",
col = "blue",
pch = 16)
qqline(EasternEurope$gdp, col = "red", lwd = 2)  # Adds a reference line
## 1.2. Plot QQ plots for both variables compared to known probability distributions
qqplot(rnorm(250),
EasternEurope$gdp,
main = "QQ Plot - Eastern Europe GDP",
col = "blue",
pch = 16)
qqline(EasternEurope$gdp, col = "red", lwd = 2)
## 1.2. Plot QQ plots for both variables compared to known probability distributions
qqplot(rnorm(250),
EasternEurope$gdp,
main = "QQ Plot - Eastern Europe GDP",
col = "blue")
qqline(EasternEurope$gdp, col = "red", lwd = 2)
qqnorm(GlobalWest$gdp,
main = "QQ Plot - Global West GDP",
col = "blue")
qqline(GlobalWest$gdp, col = "red", lwd = 2)
## 1.2. Plot QQ plots for both variables compared to known probability distributions
qqplot(rnorm(250),
EasternEurope$gdp,
main = "QQ Plot - Eastern Europe GDP",
col = "blue")
qqline(EasternEurope$gdp, col = "red", lwd = 2)
qqnorm(GlobalWest$gdp,
main = "QQ Plot - Global West GDP",
col = "blue")
qqline(GlobalWest$gdp, col = "red", lwd = 2)
qqplot(rnorm(250),
GlobalWest$gdp,
main = "QQ Plot - Global West GDP",
col = "blue")
qqline(GlobalWest$gdp, col = "red", lwd = 2)
## 1.2. Plot QQ plots for both variables compared to known probability distributions
qqplot(rnorm(250),
EasternEurope$gdp,
main = "QQ Plot - Eastern Europe GDP",
col = "blue")
qqline(EasternEurope$gdp, col = "red", lwd = 2)
View(dataset)
lmod_pop_epi <- lm(log10(population)~log10(EPI.new), data = dataset)
summary(lmod_pop_epi)
qqplot(rnorm(250),
GlobalWest$gdp,
main = "QQ Plot - Global West GDP",
col = "blue")
qqline(GlobalWest$gdp, col = "red", lwd = 2)
lmod_pop_epi <- lm(log10(gdp)~log10(EPI.new), data = dataset)
summary(lmod_pop_epi)
population
lmod_pop_epi <- lm(log10(population)~log10(EPI.new), data = dataset)
summary(lmod_pop_epi)
lmod_pop_epi <- lm(log10(gdp)~log10(EPI.new), data = dataset)
summary(lmod_pop_epi)
lmod_pop_epi <- lm((gdp/log10(population))~log10(EPI.new), data = dataset)
summary(lmod_pop_epi)
lmod_pop_epi <- lm((gdp/log10(population))~EPI.new, data = dataset)
summary(lmod_pop_epi)
lmod_pop_epi <- lm((gdp+log10(population))~EPI.new, data = dataset)
summary(lmod_pop_epi)
lmod_gdpandpop_bdh <- lm((gdp+log10(population))~BDH.new, data = dataset)
summary(lmod_gdpandpop_bdh)
ggplot(dataset, aes(x = (gdp+log10(population)), y = EPI.new)) +
geom_point() +
stat_smooth(method = "lm", col="red")
lmod_gdpandpop_epi <- lm((gdp+log10(population))~log10(EPI.new), data = dataset)
lmod_gdpandpop_epi <- lm((gdp+log10(population))~log10(EPI.new), data = dataset)
ggplot(dataset, aes(x = (gdp+log10(population)), y = log10(EPI.new)) +
stat_smooth(method = "lm", col="red")
ggplot(dataset, aes(x = (gdp+log10(population)), y = log10(EPI.new)) +
ggplot(dataset, aes(x = (gdp+log10(population)), y = EPI.new)) +
geom_point() +
stat_smooth(method = "lm", col="red")
ggplot(dataset, aes(x = (gdp+log10(population)), y = (EPI.new))) +
geom_point() +
stat_smooth(method = "lm", col="red")
ggplot(dataset, aes(x = (gdp+log10(population)), y = log10(EPI.new))) +
geom_point() +
stat_smooth(method = "lm", col="red")
lmod_gdpandpop_epi <- lm((gdp+log10(population))~log10(EPI.new), data = dataset)
summary(lmod_pop_epi)
lmod_gdpandpop_epi <- lm((gdp+log10(population))~log10(EPI.new), data = GlobalWest)
summary(lmod_pop_epi)
lmod_gdpandpop_epi <- lm((gdp+log10(population))~log10(EPI.new), data = GlobalWest)
summary(lmod_pop_epi)
lmod_gdpandpop_bdh <- lm((gdp+log10(population))~BDH.new, data = GlobalWest)
summary(lmod_gdpandpop_bdh)
lmod_gdpandpop_epi <- lm((gdp+log10(population))~log10(EPI.new), data = GlobalWest)
summary(lmod_pop_epi)
lmod_gdpandpop_epi <- lm((gdp+log10(population))~log10(EPI.new), data = dataset)
summary(lmod_pop_epi)
lmod_gdpandpop_bdh <- lm((gdp+log10(population))~BDH.new, data = dataset)
summary(lmod_gdpandpop_bdh)
lmod_gdpandpop_epi_GW <- lm((gdp+log10(population))~log10(EPI.new), data = GlobalWest)
summary(lmod_pop_epi_GW)
lmod_gdpandpop_epi <- lm((gdp+log10(population))~log10(EPI.new), data = dataset)
summary(lmod_gdpandpop_epi)
lmod_gdpandpop_epi_GW <- lm((gdp+log10(population))~log10(EPI.new), data = GlobalWest)
summary(lmod_gdpandpop_epi_GW)
lmod_gdpandpop_bdh_GW <- lm((gdp+log10(population))~BDH.new, data = GlobalWest)
summary(lmod_gdpandpop_bdh_GW)
ggplot(GlobalWest, aes(x = (gdp+log10(population)), y = log10(EPI.new))) +
geom_point() +
stat_smooth(method = "lm", col="red")
EEandGW = dataset[dataset$region=="Eastern Europe" | dataset$region=="Global West",]
View(EEandGW)
# sample create list of 105 (70% of 150) numbers randomly sampled from 1-150
n = 180
sampleEEandGW <- sample(n,n*.8)
## create train & test sets based on sampled indexes
EEandGW.train <- dataset[sampleEEandGW,]
EEandGW.test <- dataset[-sampleEEandGW,]
# simple estimate of k
k = round(sqrt(n))
k <- k-1
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
EEandGW = dataset[dataset$region=="Eastern Europe" | dataset$region=="Global West",]
# sample create list of 105 (70% of 150) numbers randomly sampled from 1-150
n = 180
sampleEEandGW <- sample(n,n*.8)
## create train & test sets based on sampled indexes
EEandGW.train <- EEandGW[sampleEEandGW,]
EEandGW.test <- EEandGW[-sampleEEandGW,]
# simple estimate of k
k = round(sqrt(n))
k <- k-1
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
EEandGW = dataset[(dataset$region=="Eastern Europe") | (dataset$region)=="Global West",]
View(EEandGW)
# sample create list of 105 (70% of 150) numbers randomly sampled from 1-150
n = 180
sampleEEandGW <- sample(n,n*.8)
## create train & test sets based on sampled indexes
EEandGW.train <- EEandGW[sampleEEandGW,]
EEandGW.test <- EEandGW[-sampleEEandGW,]
# simple estimate of k
k = round(sqrt(n))
k <- k-1
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
View(EEandGW)
EEandGW = dataset[(dataset$region=="Eastern Europe") | (dataset$region=="Global West"),]
# sample create list of 105 (70% of 150) numbers randomly sampled from 1-150
n = 180
sampleEEandGW <- sample(n,n*.8)
## create train & test sets based on sampled indexes
EEandGW.train <- EEandGW[sampleEEandGW,]
EEandGW.test <- EEandGW[-sampleEEandGW,]
# simple estimate of k
k = round(sqrt(n))
k <- k-1
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
EEandGW = dataset[(dataset$region=="Eastern Europe") | (dataset$region=="Global West"),]
unique(EEandGW$region)
# sample create list of 105 (70% of 150) numbers randomly sampled from 1-150
n = 180
sampleEEandGW <- sample(n,n*.8)
## create train & test sets based on sampled indexes
EEandGW.train <- EEandGW[sampleEEandGW,]
EEandGW.test <- EEandGW[-sampleEEandGW,]
# simple estimate of k
k = round(sqrt(n))
k <- k-1
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
EEandGW = dataset[(dataset$region=="Eastern Europe") | (dataset$region=="Global West"),]
unique(EEandGW$region)
# sample create list of 105 (70% of 150) numbers randomly sampled from 1-150
n = 180
sampleEEandGW <- sample(n,n*.8)
## create train & test sets based on sampled indexes
EEandGW.train <- EEandGW[sampleEEandGW,]
EEandGW.test <- EEandGW[-sampleEEandGW,]
print(unique(EEandGW.train$region))
# Check the unique regions in test set
print(unique(EEandGW.test$region))
EEandGW <- dataset[dataset$region %in% c("Eastern Europe", "Global West") & !is.na(dataset$region), ]
unique(EEandGW$region)
# sample create list of 105 (70% of 150) numbers randomly sampled from 1-150
n = 180
sampleEEandGW <- sample(n,n*.8)
## create train & test sets based on sampled indexes
EEandGW.train <- EEandGW[sampleEEandGW,]
EEandGW.test <- EEandGW[-sampleEEandGW,]
print(unique(EEandGW.train$region))
# Check the unique regions in test set
print(unique(EEandGW.test$region))
# Check the unique regions in test set
print(unique(EEandGW.test$region))
EEandGW <- dataset[dataset$region %in% c("Eastern Europe", "Global West") & !is.na(dataset$region), ]
unique(EEandGW$region)
# sample create list of 105 (70% of 150) numbers randomly sampled from 1-150
n = nrow(EEandGW)
sampleEEandGW <- sample(n,n*.8)
## create train & test sets based on sampled indexes
EEandGW.train <- EEandGW[sampleEEandGW,]
EEandGW.test <- EEandGW[-sampleEEandGW,]
print(unique(EEandGW.train$region))
# Check the unique regions in test set
print(unique(EEandGW.test$region))
# simple estimate of k
k = round(sqrt(n))
k <- k-1
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
# simple estimate of k
k = 2
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
# simple estimate of k
k = 4
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
# simple estimate of k
k = 5
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
# simple estimate of k
k = 8
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
# simple estimate of k
k = 4
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
# simple estimate of k
k = 2
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(8,10,12)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
## train model & predict in one step ('knn' function from 'class' library)
## trying to predict the age group by using the length, diameter
knn.predicted <- knn(train = EEandGW.train[,c(7,9,11)], test = EEandGW.test[,c(8,10,12)], cl = EEandGW.train$region, k = k)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, EEandGW.test$region, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(EEandGW.test$region)
