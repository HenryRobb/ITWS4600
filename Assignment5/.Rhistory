## predict class labels
predictions <- predict(nb.classifier, clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")])
actual <- factor(clean_m_housing$NEIGHBORHOOD, levels = levels(predictions))
levels(predictions)
levels(actual)
# Compute confusion matrix
conf_matrix <- confusionMatrix(predictions, actual)
print(conf_matrix)
# Accessing specific metrics:
accuracy <- conf_matrix$overall['Accuracy']
precision <- conf_matrix$byClass['Pos Pred Value']  # Precision for each class
recall <- conf_matrix$byClass['Sensitivity']  # Recall for each class
f1 <- 2 * (precision * recall) / (precision + recall)  # F1 score
cat("Accuracy: ", accuracy, "\n")
cat("Precision: ", precision, "\n")
cat("Recall: ", recall, "\n")
cat("F1 Score: ", f1, "\n")
View(m_housing)
View(clean_m_housing)
# import the housing dataset
housing <- read.csv("NYC_Citywide_Annualized_Calendar_Sales_Update_20241107.csv")
# make it Manhatan specific
m_housing <- housing[(housing$BOROUGH == "1" | housing$BOROUGH == "manhattan"), ]
#making a histogram for 1b to see where most of the sale prices lie
hist(log10(m_housing$SALE.PRICE),
col = "blue",
main = "Log-Transformed Sales Price Distribution - Manhattan",
xlab = "Log10(Sales Price)",
breaks = 50)
#clean the data
clean_m_housing <- m_housing[(housing$SALE.PRICE > 1000 & housing$SALE.PRICE < 500000000), ]
clean_m_housing$LAND.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$LAND.SQUARE.FEET))
clean_m_housing$GROSS.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$GROSS.SQUARE.FEET))
clean_m_housing$NUMERIC.TAX.CLASS <- as.numeric(gsub("[^0-9]", "", clean_m_housing$TAX.CLASS.AT.TIME.OF.SALE))
clean_m_housing$NUMERIC.TAX.CLASS <- 100 * clean_m_housing$NUMERIC.TAX.CLASS
clean_m_housing$TOTAL.UNITS.SCALED <- 100 * clean_m_housing$TOTAL.UNITS
lmod <- lm(log10(SALE.PRICE) ~
(log10(LAND.SQUARE.FEET + 1) +
log10(GROSS.SQUARE.FEET + 1) +
TOTAL.UNITS.SCALED +
NUMERIC.TAX.CLASS
),
data = clean_m_housing)
source("~/zzzJun/itws4600/ITWS4600/Assignment5/Assignment5_script.R", echo=TRUE)
clean_m_housing <- clean_m_housing[!is.na(clean_m_housing$LAND.SQUARE.FEET) & !is.na(clean_m_housing$SALE.PRICE), ]
clean_m_housing$LAND.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$LAND.SQUARE.FEET))
clean_m_housing$GROSS.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$GROSS.SQUARE.FEET))
clean_m_housing$NUMERIC.TAX.CLASS <- as.numeric(gsub("[^0-9]", "", clean_m_housing$TAX.CLASS.AT.TIME.OF.SALE))
clean_m_housing$NUMERIC.TAX.CLASS <- 100 * clean_m_housing$NUMERIC.TAX.CLASS
clean_m_housing$TOTAL.UNITS.SCALED <- 100 * clean_m_housing$TOTAL.UNITS
lmod <- lm(log10(SALE.PRICE) ~
(log10(LAND.SQUARE.FEET + 1) +
log10(GROSS.SQUARE.FEET + 1) +
TOTAL.UNITS.SCALED +
NUMERIC.TAX.CLASS
),
data = clean_m_housing)
# print model output
summary(lmod)
clean_m_housing <- clean_m_housing[!is.na(clean_m_housing$SALE.PRICE) &
!is.na(clean_m_housing$LAND.SQUARE.FEET) &
!is.na(clean_m_housing$GROSS.SQUARE.FEET) &
!is.na(clean_m_housing$TOTAL.UNITS), ]
clean_m_housing$LAND.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$LAND.SQUARE.FEET))
clean_m_housing$GROSS.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$GROSS.SQUARE.FEET))
clean_m_housing$NUMERIC.TAX.CLASS <- as.numeric(gsub("[^0-9]", "", clean_m_housing$TAX.CLASS.AT.TIME.OF.SALE))
clean_m_housing$NUMERIC.TAX.CLASS <- 100 * clean_m_housing$NUMERIC.TAX.CLASS
clean_m_housing$TOTAL.UNITS.SCALED <- 100 * clean_m_housing$TOTAL.UNITS
lmod <- lm(log10(SALE.PRICE) ~
(log10(LAND.SQUARE.FEET + 1) +
log10(GROSS.SQUARE.FEET + 1) +
TOTAL.UNITS.SCALED +
NUMERIC.TAX.CLASS
),
data = clean_m_housing)
#clean the data
clean_m_housing <- m_housing[(housing$SALE.PRICE > 1000 & housing$SALE.PRICE < 500000000), ]
clean_m_housing <- clean_m_housing[!is.na(clean_m_housing$SALE.PRICE) &
!is.na(clean_m_housing$LAND.SQUARE.FEET) &
!is.na(clean_m_housing$GROSS.SQUARE.FEET) &
!is.na(clean_m_housing$TOTAL.UNITS), ]
# Remove rows where any of the key columns have NaN or Inf values
clean_m_housing <- clean_m_housing[!is.nan(clean_m_housing$SALE.PRICE) &
!is.infinite(clean_m_housing$SALE.PRICE) &
!is.nan(clean_m_housing$LAND.SQUARE.FEET) &
!is.infinite(clean_m_housing$LAND.SQUARE.FEET) &
!is.nan(clean_m_housing$GROSS.SQUARE.FEET) &
!is.infinite(clean_m_housing$GROSS.SQUARE.FEET), ]
clean_m_housing$LAND.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$LAND.SQUARE.FEET))
clean_m_housing$GROSS.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$GROSS.SQUARE.FEET))
clean_m_housing$NUMERIC.TAX.CLASS <- as.numeric(gsub("[^0-9]", "", clean_m_housing$TAX.CLASS.AT.TIME.OF.SALE))
clean_m_housing$NUMERIC.TAX.CLASS <- 100 * clean_m_housing$NUMERIC.TAX.CLASS
clean_m_housing$TOTAL.UNITS.SCALED <- 100 * clean_m_housing$TOTAL.UNITS
lmod <- lm(log10(SALE.PRICE) ~
(log10(LAND.SQUARE.FEET + 1) +
log10(GROSS.SQUARE.FEET + 1) +
TOTAL.UNITS.SCALED +
NUMERIC.TAX.CLASS
),
data = clean_m_housing)
# Check for NA, NaN, or Inf values in SALE.PRICE
sum(is.na(clean_m_housing$SALE.PRICE))  # Number of NAs
sum(is.nan(clean_m_housing$SALE.PRICE)) # Number of NaNs
sum(is.infinite(clean_m_housing$SALE.PRICE)) # Number of Infs
lmod <- lm(log10(SALE.PRICE+1) ~
(log10(LAND.SQUARE.FEET + 1) +
log10(GROSS.SQUARE.FEET + 1) +
TOTAL.UNITS.SCALED +
NUMERIC.TAX.CLASS
),
data = clean_m_housing)
# print model output
summary(lmod)
# predict neighborhood based on price and area
# Remove rows where either LAND.SQUARE.FEET or SALE.PRICE are NA
clean_m_housing$LAND.SQUARE.FEET <- as.numeric(clean_m_housing$LAND.SQUARE.FEET)
clean_m_housing$SALE.PRICE <- as.numeric(clean_m_housing$SALE.PRICE)
## Naive Bayes
nb.classifier <- naiveBayes(clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")], clean_m_housing$NEIGHBORHOOD)
## predict class labels
predictions <- predict(nb.classifier, clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")])
## confusion matrix
actual <- factor(clean_m_housing$NEIGHBORHOOD, levels = levels(predictions))
levels(predictions)
levels(actual)
# Compute confusion matrix
conf_matrix <- confusionMatrix(predictions, actual)
print(conf_matrix)
# Accessing specific metrics:
accuracy <- conf_matrix$overall['Accuracy']
precision <- conf_matrix$byClass['Pos Pred Value']  # Precision for each class
recall <- conf_matrix$byClass['Sensitivity']  # Recall for each class
f1 <- 2 * (precision * recall) / (precision + recall)  # F1 score
cat("Accuracy: ", accuracy, "\n")
cat("Precision: ", precision, "\n")
cat("Recall: ", recall, "\n")
cat("F1 Score: ", f1, "\n")
print(conf_matrix)
cat("Accuracy: ", accuracy, "\n")
cat("Precision: ", precision, "\n")
cat("Recall: ", recall, "\n")
cat("F1 Score: ", f1, "\n")
for (class in levels(actual)) {
precision <- conf_matrix$byClass[class, 'Pos Pred Value']  # Precision for the current class
recall <- conf_matrix$byClass[class, 'Sensitivity']  # Recall for the current class
f1 <- 2 * (precision * recall) / (precision + recall)  # F1 score for the current class
# Print metrics for the class
cat("Class:", class, "\n")
cat("Precision: ", precision, "\n")
cat("Recall: ", recall, "\n")
cat("F1 Score: ", f1, "\n\n")
}
# Print overall accuracy
cat("Overall Accuracy: ", accuracy, "\n")
for (class in levels(actual)) {
precision <- conf_matrix$byClass[class, 'Pos Pred Value']  # Precision for the current class
recall <- conf_matrix$byClass[class, 'Sensitivity']  # Recall for the current class
f1 <- 2 * (precision * recall) / (precision + recall)  # F1 score for the current class
# Print metrics for the class
cat("Class:", class, "\n")
cat("Precision: ", precision, "\n")
cat("Recall: ", recall, "\n")
cat("F1 Score: ", f1, "\n\n")
}
for (i in 1:length(levels(actual))) {
class <- levels(actual)[i]  # Get the current class label
precision <- conf_matrix$byClass[i, 'Pos Pred Value']  # Precision for the current class
recall <- conf_matrix$byClass[i, 'Sensitivity']  # Recall for the current class
f1 <- 2 * (precision * recall) / (precision + recall)  # F1 score for the current class
# Print metrics for the class
cat("Class:", class, "\n")
cat("Precision: ", precision, "\n")
cat("Recall: ", recall, "\n")
cat("F1 Score: ", f1, "\n\n")
}
# Extract precision, recall, and F1-score
precision <- conf_matrix$byClass[, "Pos Pred Value"]  # Precision
recall <- conf_matrix$byClass[, "Sensitivity"]       # Recall (Sensitivity)
f1_score <- conf_matrix$byClass[, "F1"]              # F1-score
# Print precision, recall, and F1-score
print("Precision:")
print(precision)
print("Recall:")
print(recall)
print("F1-score:")
print(f1_score)
precision[is.nan(precision)] <- 0  # Set NaN precision to 0
recall[is.nan(recall)] <- 0
# Print precision, recall, and F1-score
print("Precision:")
print(precision)
print("Recall:")
print(recall)
print("F1-score:")
print(f1_score)
f1_score[is.nan(f1_score)] <- 0
# Print precision, recall, and F1-score
print("Precision:")
print(precision)
print("Recall:")
print(recall)
print("F1-score:")
print(f1_score)
f1_score <- conf_matrix$byClass[, "F1"]              # F1-score
precision[is.nan(precision)| is.na(precision)] <- 0  # Set NaN precision to 0
recall[is.nan(recall)| is.na(recall)] <- 0
f1_score[is.nan(f1_score) | is.na(f1_score)] <- 0
# Print precision, recall, and F1-score
print("Precision:")
print(precision)
print("Recall:")
print(recall)
print("F1-score:")
print(f1_score)
levels(actual)
## kNN
knn.predictions <- knn(clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")], clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")], clean_m_housing$NEIGHBORHOOD, k=40)
library(class)
## kNN
knn.predictions <- knn(clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")], clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")], clean_m_housing$NEIGHBORHOOD, k=40)
## kNN
knn.predictions <- knn(clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")], clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")], cl = clean_m_housing$NEIGHBORHOOD, k=40)
## kNN
knn.predictions <- knn(
train = clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = clean_m_housing$NEIGHBORHOOD,
k=40
)
## kNN
knn.predictions <- knn(
clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")],
clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")],
clean_m_housing$NEIGHBORHOOD,
40
)
## kNN
knn.predictions <- knn(
clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")],
clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")],
clean_m_housing$NEIGHBORHOOD,
40
)
## kNN
knn.predictions <- knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],  # Training data
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],   # Test data (same as training for self-prediction)
cl = clean_m_housing$NEIGHBORHOOD,                               # True labels
k = 40                                                           # Number of neighbors
)
knn.predictions <- class::knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],  # Training data
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],   # Test data (same as training for self-prediction)
cl = clean_m_housing$NEIGHBORHOOD,                               # True labels
k = 40                                                           # Number of neighbors
)
knn.predictions <- class::knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = clean_m_housing$NEIGHBORHOOD,
k = 40
)
#clean the data
clean_m_housing <- m_housing[(housing$SALE.PRICE > 1000 & housing$SALE.PRICE < 500000000), ]
#clean the data
clean_m_housing <- m_housing[(housing$SALE.PRICE > 1000 & housing$SALE.PRICE < 500000000), ]
## kNN
clean_m_housing <- clean_m_housing[
!is.na(clean_m_housing$SALE.PRICE) &
!is.na(clean_m_housing$LAND.SQUARE.FEET)
]
clean_m_housing$LAND.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$LAND.SQUARE.FEET))
clean_m_housing$GROSS.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$GROSS.SQUARE.FEET))
clean_m_housing$NUMERIC.TAX.CLASS <- as.numeric(gsub("[^0-9]", "", clean_m_housing$TAX.CLASS.AT.TIME.OF.SALE))
clean_m_housing$NUMERIC.TAX.CLASS <- 100 * clean_m_housing$NUMERIC.TAX.CLASS
clean_m_housing$TOTAL.UNITS.SCALED <- 100 * clean_m_housing$TOTAL.UNITS
## kNN
clean_m_housing <- clean_m_housing[
!is.na(clean_m_housing$SALE.PRICE) &
!is.na(clean_m_housing$LAND.SQUARE.FEET)
]
## kNN
clean_m_housing <- clean_m_housing[
!is.na(clean_m_housing$SALE.PRICE) &
!is.na(clean_m_housing$LAND.SQUARE.FEET)
,]
knn.predictions <- class::knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = clean_m_housing$NEIGHBORHOOD,
k = 40
)
## kNN
scaled_features <- scale(clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")])
# Convert to a data frame
scaled_features <- as.data.frame(scaled_features)
colnames(scaled_features) <- c("LAND.SQUARE.FEET", "SALE.PRICE")
# Add the NEIGHBORHOOD column back
scaled_features$NEIGHBORHOOD <- clean_m_housing$NEIGHBORHOOD
# Remove rows with missing values
scaled_features <- na.omit(scaled_features)
knn.predictions <- class::knn(
train = scaled_features[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = scaled_features[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = scaled_features$NEIGHBORHOOD,
k = 40
)
## kNN
clean_m_housing <- clean_m_housing[
!is.na(clean_m_housing$SALE.PRICE) &
!is.na(clean_m_housing$LAND.SQUARE.FEET)
,]
knn.predictions <- class::knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = clean_m_housing$NEIGHBORHOOD,
k = 40
)
knn.predictions <- class::knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = clean_m_housing$NEIGHBORHOOD,
k = 10
)
knn.predictions <- class::knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = clean_m_housing$NEIGHBORHOOD,
k = 5
)
knn.predictions <- class::knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = clean_m_housing$NEIGHBORHOOD,
k = 5
)
knn.predictions <- class::knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = clean_m_housing$NEIGHBORHOOD,
k = 3
)
clean_m_housing <- unique(clean_m_housing)
knn.predictions <- class::knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = clean_m_housing$NEIGHBORHOOD,
k = 40
)
## kNN
clean_m_housing <- clean_m_housing[
!is.na(clean_m_housing$SALE.PRICE) &
!is.na(clean_m_housing$LAND.SQUARE.FEET)
,]
clean_m_housing <- unique(clean_m_housing)
knn.predictions <- class::knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = clean_m_housing$NEIGHBORHOOD,
k = 40
)
sum(duplicated(clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")]))
View(clean_m_housing)
View(clean_m_housing)
clean_m_housing <- clean_m_housing[!duplicated(clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")]), ]
knn.predictions <- class::knn(
train = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
test = clean_m_housing[, c("LAND.SQUARE.FEET", "SALE.PRICE")],
cl = clean_m_housing$NEIGHBORHOOD,
k = 40
)
actual <- factor(clean_m_housing$NEIGHBORHOOD, levels = levels(knn.predictions))
# compute confusion matrix
conf_matrix <- confusionMatrix(predictions, actual)
# compute confusion matrix
conf_matrix <- confusionMatrix(knn.predictions, actual)
print(conf_matrix)
# find precision, recall, and F1-score
precision <- conf_matrix$byClass[, "Pos Pred Value"]
recall <- conf_matrix$byClass[, "Sensitivity"]
f1_score <- conf_matrix$byClass[, "F1"]
precision[is.nan(precision)| is.na(precision)] <- 0
recall[is.nan(recall)| is.na(recall)] <- 0
f1_score[is.nan(f1_score) | is.na(f1_score)] <- 0
# output precision, recall, and F1-score
print("Precision:")
print(precision)
print("Recall:")
print(recall)
print("F1-score:")
print(f1_score)
## Random Forest
rf.classifier <- randomForest(NEIGHBORHOOD~., data=clean_m_housing, proximity=TRUE)
cleaner_m_housing <- na.omit(clean_m_housing)
## Random Forest
rf.classifier <- randomForest(NEIGHBORHOOD~SALE.PRICE + LAND.SQUARE.FEET, data=clean_m_housing, proximity=TRUE)
clean_m_housing$NEIGHBORHOOD <- as.factor(clean_m_housing$NEIGHBORHOOD)
## Random Forest
rf.classifier <- randomForest(NEIGHBORHOOD~SALE.PRICE + LAND.SQUARE.FEET, data=clean_m_housing, proximity=TRUE)
## predict class labels
predictions <- predict(rf.classifier, clean_m_housing)
## predict class labels
predictions <- predict(rf.classifier, clean_m_housing)
actual <- factor(clean_m_housing$NEIGHBORHOOD, levels = levels(predictions))
# compute confusion matrix
conf_matrix <- confusionMatrix(predictions, actual)
print(conf_matrix)
## Random Forest
rf.classifier <- randomForest(NEIGHBORHOOD~SALE.PRICE + LAND.SQUARE.FEET, data=clean_m_housing, proximity=TRUE)
## Random Forest
rf.classifier <- randomForest(NEIGHBORHOOD~SALE.PRICE + LAND.SQUARE.FEET, data=clean_m_housing, proximity=TRUE)
## predict class labels
predictions <- predict(rf.classifier, clean_m_housing)
actual <- factor(clean_m_housing$NEIGHBORHOOD, levels = levels(predictions))
# compute confusion matrix
conf_matrix <- confusionMatrix(predictions, actual)
print(predictions)
print(conf_matrix)
# find precision, recall, and F1-score
precision <- conf_matrix$byClass[, "Pos Pred Value"]
recall <- conf_matrix$byClass[, "Sensitivity"]
f1_score <- conf_matrix$byClass[, "F1"]
precision[is.nan(precision)| is.na(precision)] <- 0
recall[is.nan(recall)| is.na(recall)] <- 0
f1_score[is.nan(f1_score) | is.na(f1_score)] <- 0
# output precision, recall, and F1-score
print("Precision:")
print(precision)
print("Recall:")
print(recall)
print("F1-score:")
print(f1_score)
source("~/zzzJun/itws4600/ITWS4600/Assignment5/Assignment5_script.R", echo=TRUE)
## predict class labels
predictions <- predict(nb.classifier, clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")])
## confusion matrix
actual <- factor(clean_m_housing$NEIGHBORHOOD, levels = levels(predictions))
# compute confusion matrix
conf_matrix <- confusionMatrix(predictions, actual)
print(conf_matrix)
actual <- factor(clean_m_housing$NEIGHBORHOOD, levels = levels(knn.predictions))
# compute confusion matrix
conf_matrix <- confusionMatrix(knn.predictions, actual)
print(conf_matrix)
## predict class labels
predictions <- predict(rf.classifier, clean_m_housing)
actual <- factor(clean_m_housing$NEIGHBORHOOD, levels = levels(predictions))
# compute confusion matrix
conf_matrix <- confusionMatrix(predictions, actual)
print(conf_matrix)
View(housing)
library(caret)
library(ggfortify)
library(class)
library("randomForest")
library("e1071")
library("ggplot2")
library("dplyr")
library("igraph")
library("ggraph")
library("DescTools")
# import the housing dataset
housing <- read.csv("NYC_Citywide_Annualized_Calendar_Sales_Update_20241107.csv")
# make it Manhatan specific
m_housing <- housing[(housing$BOROUGH == "3" | housing$BOROUGH == "brooklyn"), ]
#making a histogram for 1b to see where most of the sale prices lie
hist(log10(m_housing$SALE.PRICE),
col = "blue",
main = "Log-Transformed Sales Price Distribution - Manhattan",
xlab = "Log10(Sales Price)",
breaks = 50)
#clean the data
clean_m_housing <- m_housing[(housing$SALE.PRICE > 1000 & housing$SALE.PRICE < 500000000), ]
clean_m_housing$LAND.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$LAND.SQUARE.FEET))
clean_m_housing$GROSS.SQUARE.FEET <- as.numeric(gsub("[^0-9]", "", clean_m_housing$GROSS.SQUARE.FEET))
clean_m_housing$NUMERIC.TAX.CLASS <- as.numeric(gsub("[^0-9]", "", clean_m_housing$TAX.CLASS.AT.TIME.OF.SALE))
clean_m_housing$NUMERIC.TAX.CLASS <- 100 * clean_m_housing$NUMERIC.TAX.CLASS
clean_m_housing$TOTAL.UNITS.SCALED <- 100 * clean_m_housing$TOTAL.UNITS
lmod <- lm(log10(SALE.PRICE+1) ~
(log10(LAND.SQUARE.FEET + 1) +
log10(GROSS.SQUARE.FEET + 1) +
TOTAL.UNITS.SCALED +
NUMERIC.TAX.CLASS
),
data = clean_m_housing)
# print model output
summary(lmod)
# print model output
summary(lmod)
lmod <- lm(log10(SALE.PRICE+1) ~
(log10(LAND.SQUARE.FEET + 1) +
log10(GROSS.SQUARE.FEET + 1) +
TOTAL.UNITS.SCALED +
NUMERIC.TAX.CLASS
),
data = clean_m_housing)
# print model output
summary(lmod)
# print model output
summary(lmod)
source("~/zzzJun/itws4600/ITWS4600/Assignment5/Assignment5_script_brooklyn.R", echo=TRUE)
## predict class labels
predictions <- predict(nb.classifier, clean_m_housing[,c("LAND.SQUARE.FEET", "SALE.PRICE")])
## confusion matrix
actual <- factor(clean_m_housing$NEIGHBORHOOD, levels = levels(predictions))
# compute confusion matrix
conf_matrix <- confusionMatrix(predictions, actual)
print(conf_matrix)
actual <- factor(clean_m_housing$NEIGHBORHOOD, levels = levels(knn.predictions))
# compute confusion matrix
conf_matrix <- confusionMatrix(knn.predictions, actual)
print(conf_matrix)
